<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
            http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
            ">

    <bean id="defaultds" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.blog.url}"/>
        <property name="username" value="${jdbc.blog.username}"/>
        <property name="password" value="${jdbc.blog.password}"/>
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${jdbc.blog.publickey}"/>
        <property name="filters" value="config,stat,wall"/><!-- 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
        <!--<property name= "statLogger" ref ="statLoggerb" /> -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
            </list>
        </property>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="mergeSql" value="true"/>
        <property name="slowSqlMillis" value="3000"/>
        <property name="logSlowSql" value="true"/>
    </bean>
    <!--start jpa-->

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="defaultds"/>
        <!--指定持久化厂商类-->
        <property name="persistenceProvider">
            <bean class="org.hibernate.ejb.HibernatePersistence"/>
        </property>
        <!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->
        <property name="jpaVendorAdapter" >
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <!-- 指定Entity实体类包路径 -->
        <property name="packagesToScan" >
            <array>
                <value>com.github.kingschan1204.ssh.model.po</value>
            </array>
        </property>
        <!-- 指定JPA属性；如Hibernate中指定是否显示SQL的是否显示、方言等 -->
        <property name="jpaProperties">
            <props>
                <!--命名策略-->
               <!-- <prop key="hibernate.ejb.naming_strategy">hibernate.physical_naming_strategy</prop>-->
                <!--基本配置-->
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!--二级缓存-->
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="net.sf.ehcache.configurationResourceName">ehcache.xml</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <!--配置在实体类写@Cacheable就可以开启二级缓存-->
                <prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>
                <prop key="hibernate.generate_statistics">true</prop>
                <!--设置查询缓存@QueryHints-->
                <prop key="hibernate.cache.use_query_cache">true</prop>

                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">validate</prop>-->
            </props>
        </property>
    </bean>

    <!-- 重要配置：启用扫描并自动创建代理的功能  -->
   <!-- <jpa:repositories base-package="com.github.kingschan1204.ssh.repositories"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>-->

    <!-- Hibernate对Jpa的实现 -->
    <!--<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>-->

    <!-- Jpa 事务管理器  -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!--配置基于注解的事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--配置spring data-->
    <jpa:repositories base-package="com.github.kingschan1204.ssh" entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="transactionManager"></jpa:repositories>
<!--end jpa-->


    <!-- ①对数据源进行代理-->
    <!-- <bean id="dataSourceProxy"
        class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy" p:targetDataSource-ref="blog_ds"/>  -->

   <!-- <bean id="sessionfactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        &lt;!&ndash;dataSource属性指定要用到的连接池 &ndash;&gt;
        <property name="dataSource" ref="defaultds"/>
        <property name="packagesToScan" value="com.github.kingschan1204.ssh.model.po"/>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.MySQLDialect
                hibernate.show_sql=${jdbc.blog.showsql}
                hibernate.temp.use_jdbc_metadata_defaults=false
                &lt;!&ndash; 二级缓存 &ndash;&gt;
                hibernate.cache.use_second_level_cache=${hibernate.query.cache}
                hibernate.cache.use_query_cache=${hibernate.query.cache}
                &lt;!&ndash; 二级缓存区域名的前缀 hibernate.cache.region_prefix=userCache &ndash;&gt;
                hibernate.cache.region_prefix=
                &lt;!&ndash; 高速缓存提供程序 &ndash;&gt;
                hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
                &lt;!&ndash; 指定缓存配置文件位置 &ndash;&gt;
                &lt;!&ndash; hibernate.cache.provider_configuration_file_resource_path=/ehcache.xml &ndash;&gt;
                &lt;!&ndash; 强制Hibernate以更人性化的格式将数据存入二级缓存 &ndash;&gt;
                hibernate.cache.use_structured_entries=true
                &lt;!&ndash; Hibernate将收集有助于性能调节的统计数据 &ndash;&gt;
                hibernate.generate_statistics=false
                hibernate.jdbc.fetch_size=100
                hibernate.jdbc.batch_size=100
                &lt;!&ndash;  这是hibernate 4的方式hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext &ndash;&gt;
                hibernate.transaction.coordinator_class=jdbc
                hibernate.connection.release_mode=after_transaction
                hibernate.connection.autocommit=false
                &lt;!&ndash; hibernate search &ndash;&gt;
                hibernate.search.default.directory_provider=filesystem
                hibernate.search.default.indexBase=${hibernate.search.default.indexBase}
            </value>
        </property>
    </bean>


    <bean id="txDefinition" class="org.springframework.transaction.support.DefaultTransactionDefinition">
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"></property>
    </bean>

    &lt;!&ndash; 事务管理器 &ndash;&gt;
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionfactory"></property>
    </bean>-->


   <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="has*" isolation="READ_COMMITTED" propagation="REQUIRED" read-only="true" timeout="100"/>
            <tx:method name="query*" isolation="READ_COMMITTED" propagation="REQUIRED" read-only="true" timeout="100"/>
            <tx:method name="locate*" isolation="READ_COMMITTED" propagation="REQUIRED" read-only="true" timeout="100"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" timeout="100"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" timeout="100"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" timeout="100"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" timeout="100"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception" timeout="100"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" timeout="100"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true" timeout="100"/>
            <tx:method name="count*" propagation="REQUIRED" read-only="true" timeout="100"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true" timeout="100"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true" timeout="100"/>
        </tx:attributes>
    </tx:advice>

    <aop:config expose-proxy="true">
        &lt;!&ndash; 只对业务逻辑层实施事务 &ndash;&gt;
        <aop:pointcut id="txPointcut" expression="execution(* com.github.kingschan1204.ssh.services..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
    &lt;!&ndash; <aop:aspectj-autoproxy expose-proxy="true"/> &ndash;&gt;
    <aop:aspectj-autoproxy proxy-target-class="true"/>-->

</beans>  